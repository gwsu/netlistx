Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> vm_file
Rule 1     vm_file -> module_decl port_decl_list signal_decl_list primitive_list assign_stm_list ENDMODULE
Rule 2     vm_file -> module_decl port_decl_list signal_decl_list primitive_list ENDMODULE
Rule 3     module_decl -> MODULE IDENTIFIER ( pipo_list ) ;
Rule 4     pipo_list -> pipo_list IDENTIFIER
Rule 5     pipo_list -> IDENTIFIER
Rule 6     port_decl_list -> port_decl_list port_decl
Rule 7     port_decl_list -> port_decl
Rule 8     port_decl -> INPUT IDENTIFIER ;
Rule 9     port_decl -> INPUT VECTOR IDENTIFIER ;
Rule 10    port_decl -> OUTPUT IDENTIFIER ;
Rule 11    port_decl -> OUTPUT VECTOR IDENTIFIER ;
Rule 12    port_decl -> INOUT IDENTIFIER ;
Rule 13    port_decl -> INOUT VECTOR IDENTIFIER ;
Rule 14    signal_decl_list -> signal_decl_list signal_decl
Rule 15    signal_decl_list -> signal_decl
Rule 16    signal_decl -> WIRE VECTOR IDENTIFIER ;
Rule 17    signal_decl -> WIRE IDENTIFIER ;
Rule 18    primitive_list -> primitive_list primitive
Rule 19    primitive_list -> primitive
Rule 20    primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ;
Rule 21    primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ;
Rule 22    primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; defparam_list
Rule 23    primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; defparam_list
Rule 24    primitive -> IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) ; defparam_list
Rule 25    primitive_port_list -> primitive_port_list primitive_port
Rule 26    primitive_port_list -> primitive_port
Rule 27    primitive_port -> . IDENTIFIER ( signal_element )
Rule 28    primitive_port -> . IDENTIFIER ( { joint_signal_list } )
Rule 29    joint_signal_list -> joint_signal_list signal_element
Rule 30    joint_signal_list -> signal_element
Rule 31    signal_element -> IDENTIFIER BIT
Rule 32    signal_element -> IDENTIFIER VECTOR
Rule 33    signal_element -> IDENTIFIER
Rule 34    defparam_list -> defparam_list defparam_stm
Rule 35    defparam_list -> defparam_stm
Rule 36    defparam_stm -> DEFPARAM IDENTIFIER = HEX_NUMBER ;
Rule 37    defparam_stm -> DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ;
Rule 38    defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ;
Rule 39    defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ;
Rule 40    defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ;
Rule 41    defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ;
Rule 42    assign_stm_list -> assign_stm_list assign_stm
Rule 43    assign_stm_list -> assign_stm
Rule 44    assign_stm -> ASSIGN signal_element = signal_element ;
Rule 45    assign_stm -> ASSIGN signal_element = BIN_NUMBER ;

Terminals, with rules where they appear

"                    : 41 41
(                    : 3 20 21 22 23 24 27 28
)                    : 3 20 21 22 23 24 27 28
.                    : 27 28 37 38 39 40 41
;                    : 3 8 9 10 11 12 13 16 17 20 21 22 23 24 36 37 38 39 40 41 44 45
=                    : 36 37 38 39 40 41 44 45
ASSIGN               : 44 45
BIN_NUMBER           : 45
BIT                  : 21 23 31 38
DEFPARAM             : 36 37 38 39 40 41
ENDMODULE            : 1 2
HEX_NUMBER           : 36 37 38 39
IDENTIFIER           : 3 4 5 8 9 10 11 12 13 16 17 20 20 21 21 22 22 23 23 24 24 27 28 31 32 33 36 37 38 39 40 40 41 41
INIT                 : 37 38 39
INOUT                : 12 13
INPUT                : 8 9
MODULE               : 3
NUMBER               : 40
OUTPUT               : 10 11
STRING_CON           : 41
VECTOR               : 9 11 13 16 24 32 39 40 41
WIRE                 : 16 17
error                : 
{                    : 28
}                    : 28

Nonterminals, with rules where they appear

assign_stm           : 42 43
assign_stm_list      : 1 42
defparam_list        : 22 23 24 34
defparam_stm         : 34 35
joint_signal_list    : 28 29
module_decl          : 1 2
pipo_list            : 3 4
port_decl            : 6 7
port_decl_list       : 1 2 6
primitive            : 18 19
primitive_list       : 1 2 18
primitive_port       : 25 26
primitive_port_list  : 20 21 22 23 24 25
signal_decl          : 14 15
signal_decl_list     : 1 2 14
signal_element       : 27 29 30 44 44 45
vm_file              : 0

Parsing method: LALR

state 0

    (0) S' -> . vm_file
    (1) vm_file -> . module_decl port_decl_list signal_decl_list primitive_list assign_stm_list ENDMODULE
    (2) vm_file -> . module_decl port_decl_list signal_decl_list primitive_list ENDMODULE
    (3) module_decl -> . MODULE IDENTIFIER ( pipo_list ) ;

    MODULE          shift and go to state 2

    module_decl                    shift and go to state 1
    vm_file                        shift and go to state 3

state 1

    (1) vm_file -> module_decl . port_decl_list signal_decl_list primitive_list assign_stm_list ENDMODULE
    (2) vm_file -> module_decl . port_decl_list signal_decl_list primitive_list ENDMODULE
    (6) port_decl_list -> . port_decl_list port_decl
    (7) port_decl_list -> . port_decl
    (8) port_decl -> . INPUT IDENTIFIER ;
    (9) port_decl -> . INPUT VECTOR IDENTIFIER ;
    (10) port_decl -> . OUTPUT IDENTIFIER ;
    (11) port_decl -> . OUTPUT VECTOR IDENTIFIER ;
    (12) port_decl -> . INOUT IDENTIFIER ;
    (13) port_decl -> . INOUT VECTOR IDENTIFIER ;

    INPUT           shift and go to state 7
    OUTPUT          shift and go to state 6
    INOUT           shift and go to state 8

    port_decl                      shift and go to state 4
    port_decl_list                 shift and go to state 5

state 2

    (3) module_decl -> MODULE . IDENTIFIER ( pipo_list ) ;

    IDENTIFIER      shift and go to state 9


state 3

    (0) S' -> vm_file .



state 4

    (7) port_decl_list -> port_decl .

    INPUT           reduce using rule 7 (port_decl_list -> port_decl .)
    OUTPUT          reduce using rule 7 (port_decl_list -> port_decl .)
    INOUT           reduce using rule 7 (port_decl_list -> port_decl .)
    WIRE            reduce using rule 7 (port_decl_list -> port_decl .)


state 5

    (1) vm_file -> module_decl port_decl_list . signal_decl_list primitive_list assign_stm_list ENDMODULE
    (2) vm_file -> module_decl port_decl_list . signal_decl_list primitive_list ENDMODULE
    (6) port_decl_list -> port_decl_list . port_decl
    (14) signal_decl_list -> . signal_decl_list signal_decl
    (15) signal_decl_list -> . signal_decl
    (8) port_decl -> . INPUT IDENTIFIER ;
    (9) port_decl -> . INPUT VECTOR IDENTIFIER ;
    (10) port_decl -> . OUTPUT IDENTIFIER ;
    (11) port_decl -> . OUTPUT VECTOR IDENTIFIER ;
    (12) port_decl -> . INOUT IDENTIFIER ;
    (13) port_decl -> . INOUT VECTOR IDENTIFIER ;
    (16) signal_decl -> . WIRE VECTOR IDENTIFIER ;
    (17) signal_decl -> . WIRE IDENTIFIER ;

    INPUT           shift and go to state 7
    OUTPUT          shift and go to state 6
    INOUT           shift and go to state 8
    WIRE            shift and go to state 11

    signal_decl                    shift and go to state 10
    port_decl                      shift and go to state 12
    signal_decl_list               shift and go to state 13

state 6

    (10) port_decl -> OUTPUT . IDENTIFIER ;
    (11) port_decl -> OUTPUT . VECTOR IDENTIFIER ;

    IDENTIFIER      shift and go to state 14
    VECTOR          shift and go to state 15


state 7

    (8) port_decl -> INPUT . IDENTIFIER ;
    (9) port_decl -> INPUT . VECTOR IDENTIFIER ;

    IDENTIFIER      shift and go to state 16
    VECTOR          shift and go to state 17


state 8

    (12) port_decl -> INOUT . IDENTIFIER ;
    (13) port_decl -> INOUT . VECTOR IDENTIFIER ;

    IDENTIFIER      shift and go to state 18
    VECTOR          shift and go to state 19


state 9

    (3) module_decl -> MODULE IDENTIFIER . ( pipo_list ) ;

    (               shift and go to state 20


state 10

    (15) signal_decl_list -> signal_decl .

    WIRE            reduce using rule 15 (signal_decl_list -> signal_decl .)
    IDENTIFIER      reduce using rule 15 (signal_decl_list -> signal_decl .)


state 11

    (16) signal_decl -> WIRE . VECTOR IDENTIFIER ;
    (17) signal_decl -> WIRE . IDENTIFIER ;

    VECTOR          shift and go to state 22
    IDENTIFIER      shift and go to state 21


state 12

    (6) port_decl_list -> port_decl_list port_decl .

    INPUT           reduce using rule 6 (port_decl_list -> port_decl_list port_decl .)
    OUTPUT          reduce using rule 6 (port_decl_list -> port_decl_list port_decl .)
    INOUT           reduce using rule 6 (port_decl_list -> port_decl_list port_decl .)
    WIRE            reduce using rule 6 (port_decl_list -> port_decl_list port_decl .)


state 13

    (1) vm_file -> module_decl port_decl_list signal_decl_list . primitive_list assign_stm_list ENDMODULE
    (2) vm_file -> module_decl port_decl_list signal_decl_list . primitive_list ENDMODULE
    (14) signal_decl_list -> signal_decl_list . signal_decl
    (18) primitive_list -> . primitive_list primitive
    (19) primitive_list -> . primitive
    (16) signal_decl -> . WIRE VECTOR IDENTIFIER ;
    (17) signal_decl -> . WIRE IDENTIFIER ;
    (20) primitive -> . IDENTIFIER IDENTIFIER ( primitive_port_list ) ;
    (21) primitive -> . IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ;
    (22) primitive -> . IDENTIFIER IDENTIFIER ( primitive_port_list ) ; defparam_list
    (23) primitive -> . IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; defparam_list
    (24) primitive -> . IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) ; defparam_list

    WIRE            shift and go to state 11
    IDENTIFIER      shift and go to state 26

    signal_decl                    shift and go to state 23
    primitive                      shift and go to state 24
    primitive_list                 shift and go to state 25

state 14

    (10) port_decl -> OUTPUT IDENTIFIER . ;

    ;               shift and go to state 27


state 15

    (11) port_decl -> OUTPUT VECTOR . IDENTIFIER ;

    IDENTIFIER      shift and go to state 28


state 16

    (8) port_decl -> INPUT IDENTIFIER . ;

    ;               shift and go to state 29


state 17

    (9) port_decl -> INPUT VECTOR . IDENTIFIER ;

    IDENTIFIER      shift and go to state 30


state 18

    (12) port_decl -> INOUT IDENTIFIER . ;

    ;               shift and go to state 31


state 19

    (13) port_decl -> INOUT VECTOR . IDENTIFIER ;

    IDENTIFIER      shift and go to state 32


state 20

    (3) module_decl -> MODULE IDENTIFIER ( . pipo_list ) ;
    (4) pipo_list -> . pipo_list IDENTIFIER
    (5) pipo_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 34

    pipo_list                      shift and go to state 33

state 21

    (17) signal_decl -> WIRE IDENTIFIER . ;

    ;               shift and go to state 35


state 22

    (16) signal_decl -> WIRE VECTOR . IDENTIFIER ;

    IDENTIFIER      shift and go to state 36


state 23

    (14) signal_decl_list -> signal_decl_list signal_decl .

    WIRE            reduce using rule 14 (signal_decl_list -> signal_decl_list signal_decl .)
    IDENTIFIER      reduce using rule 14 (signal_decl_list -> signal_decl_list signal_decl .)


state 24

    (19) primitive_list -> primitive .

    ENDMODULE       reduce using rule 19 (primitive_list -> primitive .)
    IDENTIFIER      reduce using rule 19 (primitive_list -> primitive .)
    ASSIGN          reduce using rule 19 (primitive_list -> primitive .)


state 25

    (1) vm_file -> module_decl port_decl_list signal_decl_list primitive_list . assign_stm_list ENDMODULE
    (2) vm_file -> module_decl port_decl_list signal_decl_list primitive_list . ENDMODULE
    (18) primitive_list -> primitive_list . primitive
    (42) assign_stm_list -> . assign_stm_list assign_stm
    (43) assign_stm_list -> . assign_stm
    (20) primitive -> . IDENTIFIER IDENTIFIER ( primitive_port_list ) ;
    (21) primitive -> . IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ;
    (22) primitive -> . IDENTIFIER IDENTIFIER ( primitive_port_list ) ; defparam_list
    (23) primitive -> . IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; defparam_list
    (24) primitive -> . IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) ; defparam_list
    (44) assign_stm -> . ASSIGN signal_element = signal_element ;
    (45) assign_stm -> . ASSIGN signal_element = BIN_NUMBER ;

    ENDMODULE       shift and go to state 38
    IDENTIFIER      shift and go to state 26
    ASSIGN          shift and go to state 39

    primitive                      shift and go to state 37
    assign_stm                     shift and go to state 40
    assign_stm_list                shift and go to state 41

state 26

    (20) primitive -> IDENTIFIER . IDENTIFIER ( primitive_port_list ) ;
    (21) primitive -> IDENTIFIER . IDENTIFIER BIT ( primitive_port_list ) ;
    (22) primitive -> IDENTIFIER . IDENTIFIER ( primitive_port_list ) ; defparam_list
    (23) primitive -> IDENTIFIER . IDENTIFIER BIT ( primitive_port_list ) ; defparam_list
    (24) primitive -> IDENTIFIER . IDENTIFIER VECTOR ( primitive_port_list ) ; defparam_list

    IDENTIFIER      shift and go to state 42


state 27

    (10) port_decl -> OUTPUT IDENTIFIER ; .

    INPUT           reduce using rule 10 (port_decl -> OUTPUT IDENTIFIER ; .)
    OUTPUT          reduce using rule 10 (port_decl -> OUTPUT IDENTIFIER ; .)
    INOUT           reduce using rule 10 (port_decl -> OUTPUT IDENTIFIER ; .)
    WIRE            reduce using rule 10 (port_decl -> OUTPUT IDENTIFIER ; .)


state 28

    (11) port_decl -> OUTPUT VECTOR IDENTIFIER . ;

    ;               shift and go to state 43


state 29

    (8) port_decl -> INPUT IDENTIFIER ; .

    INPUT           reduce using rule 8 (port_decl -> INPUT IDENTIFIER ; .)
    OUTPUT          reduce using rule 8 (port_decl -> INPUT IDENTIFIER ; .)
    INOUT           reduce using rule 8 (port_decl -> INPUT IDENTIFIER ; .)
    WIRE            reduce using rule 8 (port_decl -> INPUT IDENTIFIER ; .)


state 30

    (9) port_decl -> INPUT VECTOR IDENTIFIER . ;

    ;               shift and go to state 44


state 31

    (12) port_decl -> INOUT IDENTIFIER ; .

    INPUT           reduce using rule 12 (port_decl -> INOUT IDENTIFIER ; .)
    OUTPUT          reduce using rule 12 (port_decl -> INOUT IDENTIFIER ; .)
    INOUT           reduce using rule 12 (port_decl -> INOUT IDENTIFIER ; .)
    WIRE            reduce using rule 12 (port_decl -> INOUT IDENTIFIER ; .)


state 32

    (13) port_decl -> INOUT VECTOR IDENTIFIER . ;

    ;               shift and go to state 45


state 33

    (3) module_decl -> MODULE IDENTIFIER ( pipo_list . ) ;
    (4) pipo_list -> pipo_list . IDENTIFIER

    )               shift and go to state 46
    IDENTIFIER      shift and go to state 47


state 34

    (5) pipo_list -> IDENTIFIER .

    )               reduce using rule 5 (pipo_list -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (pipo_list -> IDENTIFIER .)


state 35

    (17) signal_decl -> WIRE IDENTIFIER ; .

    WIRE            reduce using rule 17 (signal_decl -> WIRE IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 17 (signal_decl -> WIRE IDENTIFIER ; .)


state 36

    (16) signal_decl -> WIRE VECTOR IDENTIFIER . ;

    ;               shift and go to state 48


state 37

    (18) primitive_list -> primitive_list primitive .

    ENDMODULE       reduce using rule 18 (primitive_list -> primitive_list primitive .)
    IDENTIFIER      reduce using rule 18 (primitive_list -> primitive_list primitive .)
    ASSIGN          reduce using rule 18 (primitive_list -> primitive_list primitive .)


state 38

    (2) vm_file -> module_decl port_decl_list signal_decl_list primitive_list ENDMODULE .

    $end            reduce using rule 2 (vm_file -> module_decl port_decl_list signal_decl_list primitive_list ENDMODULE .)


state 39

    (44) assign_stm -> ASSIGN . signal_element = signal_element ;
    (45) assign_stm -> ASSIGN . signal_element = BIN_NUMBER ;
    (31) signal_element -> . IDENTIFIER BIT
    (32) signal_element -> . IDENTIFIER VECTOR
    (33) signal_element -> . IDENTIFIER

    IDENTIFIER      shift and go to state 50

    signal_element                 shift and go to state 49

state 40

    (43) assign_stm_list -> assign_stm .

    ENDMODULE       reduce using rule 43 (assign_stm_list -> assign_stm .)
    ASSIGN          reduce using rule 43 (assign_stm_list -> assign_stm .)


state 41

    (1) vm_file -> module_decl port_decl_list signal_decl_list primitive_list assign_stm_list . ENDMODULE
    (42) assign_stm_list -> assign_stm_list . assign_stm
    (44) assign_stm -> . ASSIGN signal_element = signal_element ;
    (45) assign_stm -> . ASSIGN signal_element = BIN_NUMBER ;

    ENDMODULE       shift and go to state 51
    ASSIGN          shift and go to state 39

    assign_stm                     shift and go to state 52

state 42

    (20) primitive -> IDENTIFIER IDENTIFIER . ( primitive_port_list ) ;
    (21) primitive -> IDENTIFIER IDENTIFIER . BIT ( primitive_port_list ) ;
    (22) primitive -> IDENTIFIER IDENTIFIER . ( primitive_port_list ) ; defparam_list
    (23) primitive -> IDENTIFIER IDENTIFIER . BIT ( primitive_port_list ) ; defparam_list
    (24) primitive -> IDENTIFIER IDENTIFIER . VECTOR ( primitive_port_list ) ; defparam_list

    (               shift and go to state 53
    BIT             shift and go to state 54
    VECTOR          shift and go to state 55


state 43

    (11) port_decl -> OUTPUT VECTOR IDENTIFIER ; .

    INPUT           reduce using rule 11 (port_decl -> OUTPUT VECTOR IDENTIFIER ; .)
    OUTPUT          reduce using rule 11 (port_decl -> OUTPUT VECTOR IDENTIFIER ; .)
    INOUT           reduce using rule 11 (port_decl -> OUTPUT VECTOR IDENTIFIER ; .)
    WIRE            reduce using rule 11 (port_decl -> OUTPUT VECTOR IDENTIFIER ; .)


state 44

    (9) port_decl -> INPUT VECTOR IDENTIFIER ; .

    INPUT           reduce using rule 9 (port_decl -> INPUT VECTOR IDENTIFIER ; .)
    OUTPUT          reduce using rule 9 (port_decl -> INPUT VECTOR IDENTIFIER ; .)
    INOUT           reduce using rule 9 (port_decl -> INPUT VECTOR IDENTIFIER ; .)
    WIRE            reduce using rule 9 (port_decl -> INPUT VECTOR IDENTIFIER ; .)


state 45

    (13) port_decl -> INOUT VECTOR IDENTIFIER ; .

    INPUT           reduce using rule 13 (port_decl -> INOUT VECTOR IDENTIFIER ; .)
    OUTPUT          reduce using rule 13 (port_decl -> INOUT VECTOR IDENTIFIER ; .)
    INOUT           reduce using rule 13 (port_decl -> INOUT VECTOR IDENTIFIER ; .)
    WIRE            reduce using rule 13 (port_decl -> INOUT VECTOR IDENTIFIER ; .)


state 46

    (3) module_decl -> MODULE IDENTIFIER ( pipo_list ) . ;

    ;               shift and go to state 56


state 47

    (4) pipo_list -> pipo_list IDENTIFIER .

    )               reduce using rule 4 (pipo_list -> pipo_list IDENTIFIER .)
    IDENTIFIER      reduce using rule 4 (pipo_list -> pipo_list IDENTIFIER .)


state 48

    (16) signal_decl -> WIRE VECTOR IDENTIFIER ; .

    WIRE            reduce using rule 16 (signal_decl -> WIRE VECTOR IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 16 (signal_decl -> WIRE VECTOR IDENTIFIER ; .)


state 49

    (44) assign_stm -> ASSIGN signal_element . = signal_element ;
    (45) assign_stm -> ASSIGN signal_element . = BIN_NUMBER ;

    =               shift and go to state 57


state 50

    (31) signal_element -> IDENTIFIER . BIT
    (32) signal_element -> IDENTIFIER . VECTOR
    (33) signal_element -> IDENTIFIER .

    BIT             shift and go to state 58
    VECTOR          shift and go to state 59
    )               reduce using rule 33 (signal_element -> IDENTIFIER .)
    ;               reduce using rule 33 (signal_element -> IDENTIFIER .)
    }               reduce using rule 33 (signal_element -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (signal_element -> IDENTIFIER .)
    =               reduce using rule 33 (signal_element -> IDENTIFIER .)


state 51

    (1) vm_file -> module_decl port_decl_list signal_decl_list primitive_list assign_stm_list ENDMODULE .

    $end            reduce using rule 1 (vm_file -> module_decl port_decl_list signal_decl_list primitive_list assign_stm_list ENDMODULE .)


state 52

    (42) assign_stm_list -> assign_stm_list assign_stm .

    ENDMODULE       reduce using rule 42 (assign_stm_list -> assign_stm_list assign_stm .)
    ASSIGN          reduce using rule 42 (assign_stm_list -> assign_stm_list assign_stm .)


state 53

    (20) primitive -> IDENTIFIER IDENTIFIER ( . primitive_port_list ) ;
    (22) primitive -> IDENTIFIER IDENTIFIER ( . primitive_port_list ) ; defparam_list
    (25) primitive_port_list -> . primitive_port_list primitive_port
    (26) primitive_port_list -> . primitive_port
    (27) primitive_port -> . . IDENTIFIER ( signal_element )
    (28) primitive_port -> . . IDENTIFIER ( { joint_signal_list } )

    .               shift and go to state 60

    primitive_port                 shift and go to state 61
    primitive_port_list            shift and go to state 62

state 54

    (21) primitive -> IDENTIFIER IDENTIFIER BIT . ( primitive_port_list ) ;
    (23) primitive -> IDENTIFIER IDENTIFIER BIT . ( primitive_port_list ) ; defparam_list

    (               shift and go to state 63


state 55

    (24) primitive -> IDENTIFIER IDENTIFIER VECTOR . ( primitive_port_list ) ; defparam_list

    (               shift and go to state 64


state 56

    (3) module_decl -> MODULE IDENTIFIER ( pipo_list ) ; .

    INPUT           reduce using rule 3 (module_decl -> MODULE IDENTIFIER ( pipo_list ) ; .)
    OUTPUT          reduce using rule 3 (module_decl -> MODULE IDENTIFIER ( pipo_list ) ; .)
    INOUT           reduce using rule 3 (module_decl -> MODULE IDENTIFIER ( pipo_list ) ; .)


state 57

    (44) assign_stm -> ASSIGN signal_element = . signal_element ;
    (45) assign_stm -> ASSIGN signal_element = . BIN_NUMBER ;
    (31) signal_element -> . IDENTIFIER BIT
    (32) signal_element -> . IDENTIFIER VECTOR
    (33) signal_element -> . IDENTIFIER

    BIN_NUMBER      shift and go to state 66
    IDENTIFIER      shift and go to state 50

    signal_element                 shift and go to state 65

state 58

    (31) signal_element -> IDENTIFIER BIT .

    )               reduce using rule 31 (signal_element -> IDENTIFIER BIT .)
    ;               reduce using rule 31 (signal_element -> IDENTIFIER BIT .)
    }               reduce using rule 31 (signal_element -> IDENTIFIER BIT .)
    IDENTIFIER      reduce using rule 31 (signal_element -> IDENTIFIER BIT .)
    =               reduce using rule 31 (signal_element -> IDENTIFIER BIT .)


state 59

    (32) signal_element -> IDENTIFIER VECTOR .

    )               reduce using rule 32 (signal_element -> IDENTIFIER VECTOR .)
    ;               reduce using rule 32 (signal_element -> IDENTIFIER VECTOR .)
    }               reduce using rule 32 (signal_element -> IDENTIFIER VECTOR .)
    IDENTIFIER      reduce using rule 32 (signal_element -> IDENTIFIER VECTOR .)
    =               reduce using rule 32 (signal_element -> IDENTIFIER VECTOR .)


state 60

    (27) primitive_port -> . . IDENTIFIER ( signal_element )
    (28) primitive_port -> . . IDENTIFIER ( { joint_signal_list } )

    IDENTIFIER      shift and go to state 67


state 61

    (26) primitive_port_list -> primitive_port .

    )               reduce using rule 26 (primitive_port_list -> primitive_port .)
    .               reduce using rule 26 (primitive_port_list -> primitive_port .)


state 62

    (20) primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list . ) ;
    (22) primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list . ) ; defparam_list
    (25) primitive_port_list -> primitive_port_list . primitive_port
    (27) primitive_port -> . . IDENTIFIER ( signal_element )
    (28) primitive_port -> . . IDENTIFIER ( { joint_signal_list } )

    )               shift and go to state 68
    .               shift and go to state 60

    primitive_port                 shift and go to state 69

state 63

    (21) primitive -> IDENTIFIER IDENTIFIER BIT ( . primitive_port_list ) ;
    (23) primitive -> IDENTIFIER IDENTIFIER BIT ( . primitive_port_list ) ; defparam_list
    (25) primitive_port_list -> . primitive_port_list primitive_port
    (26) primitive_port_list -> . primitive_port
    (27) primitive_port -> . . IDENTIFIER ( signal_element )
    (28) primitive_port -> . . IDENTIFIER ( { joint_signal_list } )

    .               shift and go to state 60

    primitive_port                 shift and go to state 61
    primitive_port_list            shift and go to state 70

state 64

    (24) primitive -> IDENTIFIER IDENTIFIER VECTOR ( . primitive_port_list ) ; defparam_list
    (25) primitive_port_list -> . primitive_port_list primitive_port
    (26) primitive_port_list -> . primitive_port
    (27) primitive_port -> . . IDENTIFIER ( signal_element )
    (28) primitive_port -> . . IDENTIFIER ( { joint_signal_list } )

    .               shift and go to state 60

    primitive_port                 shift and go to state 61
    primitive_port_list            shift and go to state 71

state 65

    (44) assign_stm -> ASSIGN signal_element = signal_element . ;

    ;               shift and go to state 72


state 66

    (45) assign_stm -> ASSIGN signal_element = BIN_NUMBER . ;

    ;               shift and go to state 73


state 67

    (27) primitive_port -> . IDENTIFIER . ( signal_element )
    (28) primitive_port -> . IDENTIFIER . ( { joint_signal_list } )

    (               shift and go to state 74


state 68

    (20) primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) . ;
    (22) primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) . ; defparam_list

    ;               shift and go to state 75


state 69

    (25) primitive_port_list -> primitive_port_list primitive_port .

    )               reduce using rule 25 (primitive_port_list -> primitive_port_list primitive_port .)
    .               reduce using rule 25 (primitive_port_list -> primitive_port_list primitive_port .)


state 70

    (21) primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list . ) ;
    (23) primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list . ) ; defparam_list
    (25) primitive_port_list -> primitive_port_list . primitive_port
    (27) primitive_port -> . . IDENTIFIER ( signal_element )
    (28) primitive_port -> . . IDENTIFIER ( { joint_signal_list } )

    )               shift and go to state 76
    .               shift and go to state 60

    primitive_port                 shift and go to state 69

state 71

    (24) primitive -> IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list . ) ; defparam_list
    (25) primitive_port_list -> primitive_port_list . primitive_port
    (27) primitive_port -> . . IDENTIFIER ( signal_element )
    (28) primitive_port -> . . IDENTIFIER ( { joint_signal_list } )

    )               shift and go to state 77
    .               shift and go to state 60

    primitive_port                 shift and go to state 69

state 72

    (44) assign_stm -> ASSIGN signal_element = signal_element ; .

    ENDMODULE       reduce using rule 44 (assign_stm -> ASSIGN signal_element = signal_element ; .)
    ASSIGN          reduce using rule 44 (assign_stm -> ASSIGN signal_element = signal_element ; .)


state 73

    (45) assign_stm -> ASSIGN signal_element = BIN_NUMBER ; .

    ENDMODULE       reduce using rule 45 (assign_stm -> ASSIGN signal_element = BIN_NUMBER ; .)
    ASSIGN          reduce using rule 45 (assign_stm -> ASSIGN signal_element = BIN_NUMBER ; .)


state 74

    (27) primitive_port -> . IDENTIFIER ( . signal_element )
    (28) primitive_port -> . IDENTIFIER ( . { joint_signal_list } )
    (31) signal_element -> . IDENTIFIER BIT
    (32) signal_element -> . IDENTIFIER VECTOR
    (33) signal_element -> . IDENTIFIER

    {               shift and go to state 78
    IDENTIFIER      shift and go to state 50

    signal_element                 shift and go to state 79

state 75

    (20) primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; .
    (22) primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; . defparam_list
    (34) defparam_list -> . defparam_list defparam_stm
    (35) defparam_list -> . defparam_stm
    (36) defparam_stm -> . DEFPARAM IDENTIFIER = HEX_NUMBER ;
    (37) defparam_stm -> . DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ;
    (38) defparam_stm -> . DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ;
    (39) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ;
    (40) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ;

    ENDMODULE       reduce using rule 20 (primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; .)
    IDENTIFIER      reduce using rule 20 (primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; .)
    ASSIGN          reduce using rule 20 (primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; .)
    DEFPARAM        shift and go to state 81

    defparam_list                  shift and go to state 80
    defparam_stm                   shift and go to state 82

state 76

    (21) primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) . ;
    (23) primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) . ; defparam_list

    ;               shift and go to state 83


state 77

    (24) primitive -> IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) . ; defparam_list

    ;               shift and go to state 84


state 78

    (28) primitive_port -> . IDENTIFIER ( { . joint_signal_list } )
    (29) joint_signal_list -> . joint_signal_list signal_element
    (30) joint_signal_list -> . signal_element
    (31) signal_element -> . IDENTIFIER BIT
    (32) signal_element -> . IDENTIFIER VECTOR
    (33) signal_element -> . IDENTIFIER

    IDENTIFIER      shift and go to state 50

    signal_element                 shift and go to state 85
    joint_signal_list              shift and go to state 86

state 79

    (27) primitive_port -> . IDENTIFIER ( signal_element . )

    )               shift and go to state 87


state 80

    (22) primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; defparam_list .
    (34) defparam_list -> defparam_list . defparam_stm
    (36) defparam_stm -> . DEFPARAM IDENTIFIER = HEX_NUMBER ;
    (37) defparam_stm -> . DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ;
    (38) defparam_stm -> . DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ;
    (39) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ;
    (40) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ;

    ENDMODULE       reduce using rule 22 (primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; defparam_list .)
    IDENTIFIER      reduce using rule 22 (primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; defparam_list .)
    ASSIGN          reduce using rule 22 (primitive -> IDENTIFIER IDENTIFIER ( primitive_port_list ) ; defparam_list .)
    DEFPARAM        shift and go to state 81

    defparam_stm                   shift and go to state 88

state 81

    (36) defparam_stm -> DEFPARAM . IDENTIFIER = HEX_NUMBER ;
    (37) defparam_stm -> DEFPARAM . IDENTIFIER . INIT = HEX_NUMBER ;
    (38) defparam_stm -> DEFPARAM . IDENTIFIER BIT . INIT = HEX_NUMBER ;
    (39) defparam_stm -> DEFPARAM . IDENTIFIER VECTOR . INIT = HEX_NUMBER ;
    (40) defparam_stm -> DEFPARAM . IDENTIFIER VECTOR . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> DEFPARAM . IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ;

    IDENTIFIER      shift and go to state 89


state 82

    (35) defparam_list -> defparam_stm .

    DEFPARAM        reduce using rule 35 (defparam_list -> defparam_stm .)
    ENDMODULE       reduce using rule 35 (defparam_list -> defparam_stm .)
    IDENTIFIER      reduce using rule 35 (defparam_list -> defparam_stm .)
    ASSIGN          reduce using rule 35 (defparam_list -> defparam_stm .)


state 83

    (21) primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; .
    (23) primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; . defparam_list
    (34) defparam_list -> . defparam_list defparam_stm
    (35) defparam_list -> . defparam_stm
    (36) defparam_stm -> . DEFPARAM IDENTIFIER = HEX_NUMBER ;
    (37) defparam_stm -> . DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ;
    (38) defparam_stm -> . DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ;
    (39) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ;
    (40) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ;

    ENDMODULE       reduce using rule 21 (primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; .)
    IDENTIFIER      reduce using rule 21 (primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; .)
    ASSIGN          reduce using rule 21 (primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; .)
    DEFPARAM        shift and go to state 81

    defparam_list                  shift and go to state 90
    defparam_stm                   shift and go to state 82

state 84

    (24) primitive -> IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) ; . defparam_list
    (34) defparam_list -> . defparam_list defparam_stm
    (35) defparam_list -> . defparam_stm
    (36) defparam_stm -> . DEFPARAM IDENTIFIER = HEX_NUMBER ;
    (37) defparam_stm -> . DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ;
    (38) defparam_stm -> . DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ;
    (39) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ;
    (40) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ;

    DEFPARAM        shift and go to state 81

    defparam_list                  shift and go to state 91
    defparam_stm                   shift and go to state 82

state 85

    (30) joint_signal_list -> signal_element .

    }               reduce using rule 30 (joint_signal_list -> signal_element .)
    IDENTIFIER      reduce using rule 30 (joint_signal_list -> signal_element .)


state 86

    (28) primitive_port -> . IDENTIFIER ( { joint_signal_list . } )
    (29) joint_signal_list -> joint_signal_list . signal_element
    (31) signal_element -> . IDENTIFIER BIT
    (32) signal_element -> . IDENTIFIER VECTOR
    (33) signal_element -> . IDENTIFIER

    }               shift and go to state 93
    IDENTIFIER      shift and go to state 50

    signal_element                 shift and go to state 92

state 87

    (27) primitive_port -> . IDENTIFIER ( signal_element ) .

    )               reduce using rule 27 (primitive_port -> . IDENTIFIER ( signal_element ) .)
    .               reduce using rule 27 (primitive_port -> . IDENTIFIER ( signal_element ) .)


state 88

    (34) defparam_list -> defparam_list defparam_stm .

    DEFPARAM        reduce using rule 34 (defparam_list -> defparam_list defparam_stm .)
    ENDMODULE       reduce using rule 34 (defparam_list -> defparam_list defparam_stm .)
    IDENTIFIER      reduce using rule 34 (defparam_list -> defparam_list defparam_stm .)
    ASSIGN          reduce using rule 34 (defparam_list -> defparam_list defparam_stm .)


state 89

    (36) defparam_stm -> DEFPARAM IDENTIFIER . = HEX_NUMBER ;
    (37) defparam_stm -> DEFPARAM IDENTIFIER . . INIT = HEX_NUMBER ;
    (38) defparam_stm -> DEFPARAM IDENTIFIER . BIT . INIT = HEX_NUMBER ;
    (39) defparam_stm -> DEFPARAM IDENTIFIER . VECTOR . INIT = HEX_NUMBER ;
    (40) defparam_stm -> DEFPARAM IDENTIFIER . VECTOR . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> DEFPARAM IDENTIFIER . VECTOR . IDENTIFIER = " STRING_CON " ;

    =               shift and go to state 96
    .               shift and go to state 94
    BIT             shift and go to state 97
    VECTOR          shift and go to state 95


state 90

    (23) primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; defparam_list .
    (34) defparam_list -> defparam_list . defparam_stm
    (36) defparam_stm -> . DEFPARAM IDENTIFIER = HEX_NUMBER ;
    (37) defparam_stm -> . DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ;
    (38) defparam_stm -> . DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ;
    (39) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ;
    (40) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ;

    ENDMODULE       reduce using rule 23 (primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; defparam_list .)
    IDENTIFIER      reduce using rule 23 (primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; defparam_list .)
    ASSIGN          reduce using rule 23 (primitive -> IDENTIFIER IDENTIFIER BIT ( primitive_port_list ) ; defparam_list .)
    DEFPARAM        shift and go to state 81

    defparam_stm                   shift and go to state 88

state 91

    (24) primitive -> IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) ; defparam_list .
    (34) defparam_list -> defparam_list . defparam_stm
    (36) defparam_stm -> . DEFPARAM IDENTIFIER = HEX_NUMBER ;
    (37) defparam_stm -> . DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ;
    (38) defparam_stm -> . DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ;
    (39) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ;
    (40) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> . DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ;

    ENDMODULE       reduce using rule 24 (primitive -> IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) ; defparam_list .)
    IDENTIFIER      reduce using rule 24 (primitive -> IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) ; defparam_list .)
    ASSIGN          reduce using rule 24 (primitive -> IDENTIFIER IDENTIFIER VECTOR ( primitive_port_list ) ; defparam_list .)
    DEFPARAM        shift and go to state 81

    defparam_stm                   shift and go to state 88

state 92

    (29) joint_signal_list -> joint_signal_list signal_element .

    }               reduce using rule 29 (joint_signal_list -> joint_signal_list signal_element .)
    IDENTIFIER      reduce using rule 29 (joint_signal_list -> joint_signal_list signal_element .)


state 93

    (28) primitive_port -> . IDENTIFIER ( { joint_signal_list } . )

    )               shift and go to state 98


state 94

    (37) defparam_stm -> DEFPARAM IDENTIFIER . . INIT = HEX_NUMBER ;

    INIT            shift and go to state 99


state 95

    (39) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . . INIT = HEX_NUMBER ;
    (40) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . . IDENTIFIER = " STRING_CON " ;

    .               shift and go to state 100


state 96

    (36) defparam_stm -> DEFPARAM IDENTIFIER = . HEX_NUMBER ;

    HEX_NUMBER      shift and go to state 101


state 97

    (38) defparam_stm -> DEFPARAM IDENTIFIER BIT . . INIT = HEX_NUMBER ;

    .               shift and go to state 102


state 98

    (28) primitive_port -> . IDENTIFIER ( { joint_signal_list } ) .

    )               reduce using rule 28 (primitive_port -> . IDENTIFIER ( { joint_signal_list } ) .)
    .               reduce using rule 28 (primitive_port -> . IDENTIFIER ( { joint_signal_list } ) .)


state 99

    (37) defparam_stm -> DEFPARAM IDENTIFIER . INIT . = HEX_NUMBER ;

    =               shift and go to state 103


state 100

    (39) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . . INIT = HEX_NUMBER ;
    (40) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . . IDENTIFIER = NUMBER ;
    (41) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . . IDENTIFIER = " STRING_CON " ;

    INIT            shift and go to state 104
    IDENTIFIER      shift and go to state 105


state 101

    (36) defparam_stm -> DEFPARAM IDENTIFIER = HEX_NUMBER . ;

    ;               shift and go to state 106


state 102

    (38) defparam_stm -> DEFPARAM IDENTIFIER BIT . . INIT = HEX_NUMBER ;

    INIT            shift and go to state 107


state 103

    (37) defparam_stm -> DEFPARAM IDENTIFIER . INIT = . HEX_NUMBER ;

    HEX_NUMBER      shift and go to state 108


state 104

    (39) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT . = HEX_NUMBER ;

    =               shift and go to state 109


state 105

    (40) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER . = NUMBER ;
    (41) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER . = " STRING_CON " ;

    =               shift and go to state 110


state 106

    (36) defparam_stm -> DEFPARAM IDENTIFIER = HEX_NUMBER ; .

    DEFPARAM        reduce using rule 36 (defparam_stm -> DEFPARAM IDENTIFIER = HEX_NUMBER ; .)
    ENDMODULE       reduce using rule 36 (defparam_stm -> DEFPARAM IDENTIFIER = HEX_NUMBER ; .)
    IDENTIFIER      reduce using rule 36 (defparam_stm -> DEFPARAM IDENTIFIER = HEX_NUMBER ; .)
    ASSIGN          reduce using rule 36 (defparam_stm -> DEFPARAM IDENTIFIER = HEX_NUMBER ; .)


state 107

    (38) defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT . = HEX_NUMBER ;

    =               shift and go to state 111


state 108

    (37) defparam_stm -> DEFPARAM IDENTIFIER . INIT = HEX_NUMBER . ;

    ;               shift and go to state 112


state 109

    (39) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT = . HEX_NUMBER ;

    HEX_NUMBER      shift and go to state 113


state 110

    (40) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = . NUMBER ;
    (41) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = . " STRING_CON " ;

    NUMBER          shift and go to state 115
    "               shift and go to state 114


state 111

    (38) defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT = . HEX_NUMBER ;

    HEX_NUMBER      shift and go to state 116


state 112

    (37) defparam_stm -> DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ; .

    DEFPARAM        reduce using rule 37 (defparam_stm -> DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ; .)
    ENDMODULE       reduce using rule 37 (defparam_stm -> DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ; .)
    IDENTIFIER      reduce using rule 37 (defparam_stm -> DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ; .)
    ASSIGN          reduce using rule 37 (defparam_stm -> DEFPARAM IDENTIFIER . INIT = HEX_NUMBER ; .)


state 113

    (39) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER . ;

    ;               shift and go to state 117


state 114

    (41) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " . STRING_CON " ;

    STRING_CON      shift and go to state 118


state 115

    (40) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER . ;

    ;               shift and go to state 119


state 116

    (38) defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER . ;

    ;               shift and go to state 120


state 117

    (39) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ; .

    DEFPARAM        reduce using rule 39 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ; .)
    ENDMODULE       reduce using rule 39 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ; .)
    IDENTIFIER      reduce using rule 39 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ; .)
    ASSIGN          reduce using rule 39 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . INIT = HEX_NUMBER ; .)


state 118

    (41) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON . " ;

    "               shift and go to state 121


state 119

    (40) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ; .

    DEFPARAM        reduce using rule 40 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ; .)
    ENDMODULE       reduce using rule 40 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ; .)
    IDENTIFIER      reduce using rule 40 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ; .)
    ASSIGN          reduce using rule 40 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = NUMBER ; .)


state 120

    (38) defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ; .

    DEFPARAM        reduce using rule 38 (defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ; .)
    ENDMODULE       reduce using rule 38 (defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ; .)
    IDENTIFIER      reduce using rule 38 (defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ; .)
    ASSIGN          reduce using rule 38 (defparam_stm -> DEFPARAM IDENTIFIER BIT . INIT = HEX_NUMBER ; .)


state 121

    (41) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " . ;

    ;               shift and go to state 122


state 122

    (41) defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ; .

    DEFPARAM        reduce using rule 41 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ; .)
    ENDMODULE       reduce using rule 41 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ; .)
    IDENTIFIER      reduce using rule 41 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ; .)
    ASSIGN          reduce using rule 41 (defparam_stm -> DEFPARAM IDENTIFIER VECTOR . IDENTIFIER = " STRING_CON " ; .)

